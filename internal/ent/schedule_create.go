// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cat-led/internal/ent/schedule"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ScheduleCreate is the builder for creating a Schedule entity.
type ScheduleCreate struct {
	config
	mutation *ScheduleMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *ScheduleCreate) SetName(s string) *ScheduleCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetCreator sets the "creator" field.
func (sc *ScheduleCreate) SetCreator(s string) *ScheduleCreate {
	sc.mutation.SetCreator(s)
	return sc
}

// SetWeekDays sets the "week_days" field.
func (sc *ScheduleCreate) SetWeekDays(i []int) *ScheduleCreate {
	sc.mutation.SetWeekDays(i)
	return sc
}

// SetHour sets the "hour" field.
func (sc *ScheduleCreate) SetHour(i int) *ScheduleCreate {
	sc.mutation.SetHour(i)
	return sc
}

// SetMinute sets the "minute" field.
func (sc *ScheduleCreate) SetMinute(i int) *ScheduleCreate {
	sc.mutation.SetMinute(i)
	return sc
}

// SetOperation sets the "operation" field.
func (sc *ScheduleCreate) SetOperation(s schedule.Operation) *ScheduleCreate {
	sc.mutation.SetOperation(s)
	return sc
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableOperation(s *schedule.Operation) *ScheduleCreate {
	if s != nil {
		sc.SetOperation(*s)
	}
	return sc
}

// SetEnabled sets the "enabled" field.
func (sc *ScheduleCreate) SetEnabled(b bool) *ScheduleCreate {
	sc.mutation.SetEnabled(b)
	return sc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableEnabled(b *bool) *ScheduleCreate {
	if b != nil {
		sc.SetEnabled(*b)
	}
	return sc
}

// SetAllowEditByOthers sets the "allow_edit_by_others" field.
func (sc *ScheduleCreate) SetAllowEditByOthers(b bool) *ScheduleCreate {
	sc.mutation.SetAllowEditByOthers(b)
	return sc
}

// SetID sets the "id" field.
func (sc *ScheduleCreate) SetID(u uuid.UUID) *ScheduleCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScheduleCreate) SetNillableID(u *uuid.UUID) *ScheduleCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the ScheduleMutation object of the builder.
func (sc *ScheduleCreate) Mutation() *ScheduleMutation {
	return sc.mutation
}

// Save creates the Schedule in the database.
func (sc *ScheduleCreate) Save(ctx context.Context) (*Schedule, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScheduleCreate) SaveX(ctx context.Context) *Schedule {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScheduleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScheduleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScheduleCreate) defaults() {
	if _, ok := sc.mutation.Operation(); !ok {
		v := schedule.DefaultOperation
		sc.mutation.SetOperation(v)
	}
	if _, ok := sc.mutation.Enabled(); !ok {
		v := schedule.DefaultEnabled
		sc.mutation.SetEnabled(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := schedule.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScheduleCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Schedule.name"`)}
	}
	if _, ok := sc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "Schedule.creator"`)}
	}
	if _, ok := sc.mutation.WeekDays(); !ok {
		return &ValidationError{Name: "week_days", err: errors.New(`ent: missing required field "Schedule.week_days"`)}
	}
	if _, ok := sc.mutation.Hour(); !ok {
		return &ValidationError{Name: "hour", err: errors.New(`ent: missing required field "Schedule.hour"`)}
	}
	if _, ok := sc.mutation.Minute(); !ok {
		return &ValidationError{Name: "minute", err: errors.New(`ent: missing required field "Schedule.minute"`)}
	}
	if _, ok := sc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "Schedule.operation"`)}
	}
	if v, ok := sc.mutation.Operation(); ok {
		if err := schedule.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "Schedule.operation": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "Schedule.enabled"`)}
	}
	if _, ok := sc.mutation.AllowEditByOthers(); !ok {
		return &ValidationError{Name: "allow_edit_by_others", err: errors.New(`ent: missing required field "Schedule.allow_edit_by_others"`)}
	}
	return nil
}

func (sc *ScheduleCreate) sqlSave(ctx context.Context) (*Schedule, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScheduleCreate) createSpec() (*Schedule, *sqlgraph.CreateSpec) {
	var (
		_node = &Schedule{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(schedule.Table, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(schedule.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.SetField(schedule.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := sc.mutation.WeekDays(); ok {
		_spec.SetField(schedule.FieldWeekDays, field.TypeJSON, value)
		_node.WeekDays = value
	}
	if value, ok := sc.mutation.Hour(); ok {
		_spec.SetField(schedule.FieldHour, field.TypeInt, value)
		_node.Hour = value
	}
	if value, ok := sc.mutation.Minute(); ok {
		_spec.SetField(schedule.FieldMinute, field.TypeInt, value)
		_node.Minute = value
	}
	if value, ok := sc.mutation.Operation(); ok {
		_spec.SetField(schedule.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := sc.mutation.Enabled(); ok {
		_spec.SetField(schedule.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := sc.mutation.AllowEditByOthers(); ok {
		_spec.SetField(schedule.FieldAllowEditByOthers, field.TypeBool, value)
		_node.AllowEditByOthers = value
	}
	return _node, _spec
}

// ScheduleCreateBulk is the builder for creating many Schedule entities in bulk.
type ScheduleCreateBulk struct {
	config
	err      error
	builders []*ScheduleCreate
}

// Save creates the Schedule entities in the database.
func (scb *ScheduleCreateBulk) Save(ctx context.Context) ([]*Schedule, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Schedule, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScheduleCreateBulk) SaveX(ctx context.Context) []*Schedule {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
