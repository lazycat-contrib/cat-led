// Code generated by ent, DO NOT EDIT.

package schedule

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the schedule type in the database.
	Label = "schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldWeekDays holds the string denoting the week_days field in the database.
	FieldWeekDays = "week_days"
	// FieldHour holds the string denoting the hour field in the database.
	FieldHour = "hour"
	// FieldMinute holds the string denoting the minute field in the database.
	FieldMinute = "minute"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldAllowEditByOthers holds the string denoting the allow_edit_by_others field in the database.
	FieldAllowEditByOthers = "allow_edit_by_others"
	// Table holds the table name of the schedule in the database.
	Table = "schedules"
)

// Columns holds all SQL columns for schedule fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreator,
	FieldWeekDays,
	FieldHour,
	FieldMinute,
	FieldOperation,
	FieldEnabled,
	FieldAllowEditByOthers,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Operation defines the type for the "operation" enum field.
type Operation string

// OperationOn is the default value of the Operation enum.
const DefaultOperation = OperationOn

// Operation values.
const (
	OperationOn  Operation = "on"
	OperationOff Operation = "off"
)

func (o Operation) String() string {
	return string(o)
}

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o Operation) error {
	switch o {
	case OperationOn, OperationOff:
		return nil
	default:
		return fmt.Errorf("schedule: invalid enum value for operation field: %q", o)
	}
}

// OrderOption defines the ordering options for the Schedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByHour orders the results by the hour field.
func ByHour(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHour, opts...).ToFunc()
}

// ByMinute orders the results by the minute field.
func ByMinute(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinute, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByAllowEditByOthers orders the results by the allow_edit_by_others field.
func ByAllowEditByOthers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowEditByOthers, opts...).ToFunc()
}
