// Code generated by ent, DO NOT EDIT.

package schedule

import (
	"cat-led/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldName, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreator, v))
}

// Hour applies equality check predicate on the "hour" field. It's identical to HourEQ.
func Hour(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldHour, v))
}

// Minute applies equality check predicate on the "minute" field. It's identical to MinuteEQ.
func Minute(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldMinute, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldEnabled, v))
}

// AllowEditByOthers applies equality check predicate on the "allow_edit_by_others" field. It's identical to AllowEditByOthersEQ.
func AllowEditByOthers(v bool) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldAllowEditByOthers, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldName, v))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(sql.FieldContainsFold(FieldCreator, v))
}

// HourEQ applies the EQ predicate on the "hour" field.
func HourEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldHour, v))
}

// HourNEQ applies the NEQ predicate on the "hour" field.
func HourNEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldHour, v))
}

// HourIn applies the In predicate on the "hour" field.
func HourIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldHour, vs...))
}

// HourNotIn applies the NotIn predicate on the "hour" field.
func HourNotIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldHour, vs...))
}

// HourGT applies the GT predicate on the "hour" field.
func HourGT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldHour, v))
}

// HourGTE applies the GTE predicate on the "hour" field.
func HourGTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldHour, v))
}

// HourLT applies the LT predicate on the "hour" field.
func HourLT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldHour, v))
}

// HourLTE applies the LTE predicate on the "hour" field.
func HourLTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldHour, v))
}

// MinuteEQ applies the EQ predicate on the "minute" field.
func MinuteEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldMinute, v))
}

// MinuteNEQ applies the NEQ predicate on the "minute" field.
func MinuteNEQ(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldMinute, v))
}

// MinuteIn applies the In predicate on the "minute" field.
func MinuteIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldMinute, vs...))
}

// MinuteNotIn applies the NotIn predicate on the "minute" field.
func MinuteNotIn(vs ...int) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldMinute, vs...))
}

// MinuteGT applies the GT predicate on the "minute" field.
func MinuteGT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGT(FieldMinute, v))
}

// MinuteGTE applies the GTE predicate on the "minute" field.
func MinuteGTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldGTE(FieldMinute, v))
}

// MinuteLT applies the LT predicate on the "minute" field.
func MinuteLT(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLT(FieldMinute, v))
}

// MinuteLTE applies the LTE predicate on the "minute" field.
func MinuteLTE(v int) predicate.Schedule {
	return predicate.Schedule(sql.FieldLTE(FieldMinute, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v Operation) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v Operation) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...Operation) predicate.Schedule {
	return predicate.Schedule(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...Operation) predicate.Schedule {
	return predicate.Schedule(sql.FieldNotIn(FieldOperation, vs...))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldEnabled, v))
}

// AllowEditByOthersEQ applies the EQ predicate on the "allow_edit_by_others" field.
func AllowEditByOthersEQ(v bool) predicate.Schedule {
	return predicate.Schedule(sql.FieldEQ(FieldAllowEditByOthers, v))
}

// AllowEditByOthersNEQ applies the NEQ predicate on the "allow_edit_by_others" field.
func AllowEditByOthersNEQ(v bool) predicate.Schedule {
	return predicate.Schedule(sql.FieldNEQ(FieldAllowEditByOthers, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(sql.NotPredicates(p))
}
