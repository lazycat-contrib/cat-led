// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cat-led/internal/ent/schedule"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// WeekDays holds the value of the "week_days" field.
	WeekDays []int `json:"week_days,omitempty"`
	// Hour holds the value of the "hour" field.
	Hour int `json:"hour,omitempty"`
	// Minute holds the value of the "minute" field.
	Minute int `json:"minute,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation schedule.Operation `json:"operation,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// AllowEditByOthers holds the value of the "allow_edit_by_others" field.
	AllowEditByOthers bool `json:"allow_edit_by_others,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedule.FieldWeekDays:
			values[i] = new([]byte)
		case schedule.FieldEnabled, schedule.FieldAllowEditByOthers:
			values[i] = new(sql.NullBool)
		case schedule.FieldHour, schedule.FieldMinute:
			values[i] = new(sql.NullInt64)
		case schedule.FieldName, schedule.FieldCreator, schedule.FieldOperation:
			values[i] = new(sql.NullString)
		case schedule.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case schedule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case schedule.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				s.Creator = value.String
			}
		case schedule.FieldWeekDays:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field week_days", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.WeekDays); err != nil {
					return fmt.Errorf("unmarshal field week_days: %w", err)
				}
			}
		case schedule.FieldHour:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hour", values[i])
			} else if value.Valid {
				s.Hour = int(value.Int64)
			}
		case schedule.FieldMinute:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minute", values[i])
			} else if value.Valid {
				s.Minute = int(value.Int64)
			}
		case schedule.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				s.Operation = schedule.Operation(value.String)
			}
		case schedule.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				s.Enabled = value.Bool
			}
		case schedule.FieldAllowEditByOthers:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_edit_by_others", values[i])
			} else if value.Valid {
				s.AllowEditByOthers = value.Bool
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Schedule.
// This includes values selected through modifiers, order, etc.
func (s *Schedule) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Schedule.
// Note that you need to call Schedule.Unwrap() before calling this method if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return NewScheduleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Schedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Schedule is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(s.Creator)
	builder.WriteString(", ")
	builder.WriteString("week_days=")
	builder.WriteString(fmt.Sprintf("%v", s.WeekDays))
	builder.WriteString(", ")
	builder.WriteString("hour=")
	builder.WriteString(fmt.Sprintf("%v", s.Hour))
	builder.WriteString(", ")
	builder.WriteString("minute=")
	builder.WriteString(fmt.Sprintf("%v", s.Minute))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", s.Operation))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", s.Enabled))
	builder.WriteString(", ")
	builder.WriteString("allow_edit_by_others=")
	builder.WriteString(fmt.Sprintf("%v", s.AllowEditByOthers))
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule
