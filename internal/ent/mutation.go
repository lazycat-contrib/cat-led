// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cat-led/internal/ent/predicate"
	"cat-led/internal/ent/schedule"
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSchedule = "Schedule"
)

// ScheduleMutation represents an operation that mutates the Schedule nodes in the graph.
type ScheduleMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	name                 *string
	creator              *string
	week_days            *[]int
	appendweek_days      []int
	hour                 *int
	addhour              *int
	minute               *int
	addminute            *int
	operation            *schedule.Operation
	enabled              *bool
	allow_edit_by_others *bool
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*Schedule, error)
	predicates           []predicate.Schedule
}

var _ ent.Mutation = (*ScheduleMutation)(nil)

// scheduleOption allows management of the mutation configuration using functional options.
type scheduleOption func(*ScheduleMutation)

// newScheduleMutation creates new mutation for the Schedule entity.
func newScheduleMutation(c config, op Op, opts ...scheduleOption) *ScheduleMutation {
	m := &ScheduleMutation{
		config:        c,
		op:            op,
		typ:           TypeSchedule,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScheduleID sets the ID field of the mutation.
func withScheduleID(id uuid.UUID) scheduleOption {
	return func(m *ScheduleMutation) {
		var (
			err   error
			once  sync.Once
			value *Schedule
		)
		m.oldValue = func(ctx context.Context) (*Schedule, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Schedule.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSchedule sets the old Schedule of the mutation.
func withSchedule(node *Schedule) scheduleOption {
	return func(m *ScheduleMutation) {
		m.oldValue = func(context.Context) (*Schedule, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScheduleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScheduleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Schedule entities.
func (m *ScheduleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScheduleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScheduleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Schedule.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ScheduleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ScheduleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ScheduleMutation) ResetName() {
	m.name = nil
}

// SetCreator sets the "creator" field.
func (m *ScheduleMutation) SetCreator(s string) {
	m.creator = &s
}

// Creator returns the value of the "creator" field in the mutation.
func (m *ScheduleMutation) Creator() (r string, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldCreator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ResetCreator resets all changes to the "creator" field.
func (m *ScheduleMutation) ResetCreator() {
	m.creator = nil
}

// SetWeekDays sets the "week_days" field.
func (m *ScheduleMutation) SetWeekDays(i []int) {
	m.week_days = &i
	m.appendweek_days = nil
}

// WeekDays returns the value of the "week_days" field in the mutation.
func (m *ScheduleMutation) WeekDays() (r []int, exists bool) {
	v := m.week_days
	if v == nil {
		return
	}
	return *v, true
}

// OldWeekDays returns the old "week_days" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldWeekDays(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeekDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeekDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeekDays: %w", err)
	}
	return oldValue.WeekDays, nil
}

// AppendWeekDays adds i to the "week_days" field.
func (m *ScheduleMutation) AppendWeekDays(i []int) {
	m.appendweek_days = append(m.appendweek_days, i...)
}

// AppendedWeekDays returns the list of values that were appended to the "week_days" field in this mutation.
func (m *ScheduleMutation) AppendedWeekDays() ([]int, bool) {
	if len(m.appendweek_days) == 0 {
		return nil, false
	}
	return m.appendweek_days, true
}

// ResetWeekDays resets all changes to the "week_days" field.
func (m *ScheduleMutation) ResetWeekDays() {
	m.week_days = nil
	m.appendweek_days = nil
}

// SetHour sets the "hour" field.
func (m *ScheduleMutation) SetHour(i int) {
	m.hour = &i
	m.addhour = nil
}

// Hour returns the value of the "hour" field in the mutation.
func (m *ScheduleMutation) Hour() (r int, exists bool) {
	v := m.hour
	if v == nil {
		return
	}
	return *v, true
}

// OldHour returns the old "hour" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldHour(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHour is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHour requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHour: %w", err)
	}
	return oldValue.Hour, nil
}

// AddHour adds i to the "hour" field.
func (m *ScheduleMutation) AddHour(i int) {
	if m.addhour != nil {
		*m.addhour += i
	} else {
		m.addhour = &i
	}
}

// AddedHour returns the value that was added to the "hour" field in this mutation.
func (m *ScheduleMutation) AddedHour() (r int, exists bool) {
	v := m.addhour
	if v == nil {
		return
	}
	return *v, true
}

// ResetHour resets all changes to the "hour" field.
func (m *ScheduleMutation) ResetHour() {
	m.hour = nil
	m.addhour = nil
}

// SetMinute sets the "minute" field.
func (m *ScheduleMutation) SetMinute(i int) {
	m.minute = &i
	m.addminute = nil
}

// Minute returns the value of the "minute" field in the mutation.
func (m *ScheduleMutation) Minute() (r int, exists bool) {
	v := m.minute
	if v == nil {
		return
	}
	return *v, true
}

// OldMinute returns the old "minute" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldMinute(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinute is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinute requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinute: %w", err)
	}
	return oldValue.Minute, nil
}

// AddMinute adds i to the "minute" field.
func (m *ScheduleMutation) AddMinute(i int) {
	if m.addminute != nil {
		*m.addminute += i
	} else {
		m.addminute = &i
	}
}

// AddedMinute returns the value that was added to the "minute" field in this mutation.
func (m *ScheduleMutation) AddedMinute() (r int, exists bool) {
	v := m.addminute
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinute resets all changes to the "minute" field.
func (m *ScheduleMutation) ResetMinute() {
	m.minute = nil
	m.addminute = nil
}

// SetOperation sets the "operation" field.
func (m *ScheduleMutation) SetOperation(s schedule.Operation) {
	m.operation = &s
}

// Operation returns the value of the "operation" field in the mutation.
func (m *ScheduleMutation) Operation() (r schedule.Operation, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldOperation(ctx context.Context) (v schedule.Operation, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ResetOperation resets all changes to the "operation" field.
func (m *ScheduleMutation) ResetOperation() {
	m.operation = nil
}

// SetEnabled sets the "enabled" field.
func (m *ScheduleMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *ScheduleMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *ScheduleMutation) ResetEnabled() {
	m.enabled = nil
}

// SetAllowEditByOthers sets the "allow_edit_by_others" field.
func (m *ScheduleMutation) SetAllowEditByOthers(b bool) {
	m.allow_edit_by_others = &b
}

// AllowEditByOthers returns the value of the "allow_edit_by_others" field in the mutation.
func (m *ScheduleMutation) AllowEditByOthers() (r bool, exists bool) {
	v := m.allow_edit_by_others
	if v == nil {
		return
	}
	return *v, true
}

// OldAllowEditByOthers returns the old "allow_edit_by_others" field's value of the Schedule entity.
// If the Schedule object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScheduleMutation) OldAllowEditByOthers(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllowEditByOthers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllowEditByOthers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllowEditByOthers: %w", err)
	}
	return oldValue.AllowEditByOthers, nil
}

// ResetAllowEditByOthers resets all changes to the "allow_edit_by_others" field.
func (m *ScheduleMutation) ResetAllowEditByOthers() {
	m.allow_edit_by_others = nil
}

// Where appends a list predicates to the ScheduleMutation builder.
func (m *ScheduleMutation) Where(ps ...predicate.Schedule) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScheduleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScheduleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Schedule, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScheduleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScheduleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Schedule).
func (m *ScheduleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScheduleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, schedule.FieldName)
	}
	if m.creator != nil {
		fields = append(fields, schedule.FieldCreator)
	}
	if m.week_days != nil {
		fields = append(fields, schedule.FieldWeekDays)
	}
	if m.hour != nil {
		fields = append(fields, schedule.FieldHour)
	}
	if m.minute != nil {
		fields = append(fields, schedule.FieldMinute)
	}
	if m.operation != nil {
		fields = append(fields, schedule.FieldOperation)
	}
	if m.enabled != nil {
		fields = append(fields, schedule.FieldEnabled)
	}
	if m.allow_edit_by_others != nil {
		fields = append(fields, schedule.FieldAllowEditByOthers)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScheduleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case schedule.FieldName:
		return m.Name()
	case schedule.FieldCreator:
		return m.Creator()
	case schedule.FieldWeekDays:
		return m.WeekDays()
	case schedule.FieldHour:
		return m.Hour()
	case schedule.FieldMinute:
		return m.Minute()
	case schedule.FieldOperation:
		return m.Operation()
	case schedule.FieldEnabled:
		return m.Enabled()
	case schedule.FieldAllowEditByOthers:
		return m.AllowEditByOthers()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScheduleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case schedule.FieldName:
		return m.OldName(ctx)
	case schedule.FieldCreator:
		return m.OldCreator(ctx)
	case schedule.FieldWeekDays:
		return m.OldWeekDays(ctx)
	case schedule.FieldHour:
		return m.OldHour(ctx)
	case schedule.FieldMinute:
		return m.OldMinute(ctx)
	case schedule.FieldOperation:
		return m.OldOperation(ctx)
	case schedule.FieldEnabled:
		return m.OldEnabled(ctx)
	case schedule.FieldAllowEditByOthers:
		return m.OldAllowEditByOthers(ctx)
	}
	return nil, fmt.Errorf("unknown Schedule field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScheduleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case schedule.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case schedule.FieldCreator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case schedule.FieldWeekDays:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeekDays(v)
		return nil
	case schedule.FieldHour:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHour(v)
		return nil
	case schedule.FieldMinute:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinute(v)
		return nil
	case schedule.FieldOperation:
		v, ok := value.(schedule.Operation)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case schedule.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case schedule.FieldAllowEditByOthers:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllowEditByOthers(v)
		return nil
	}
	return fmt.Errorf("unknown Schedule field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScheduleMutation) AddedFields() []string {
	var fields []string
	if m.addhour != nil {
		fields = append(fields, schedule.FieldHour)
	}
	if m.addminute != nil {
		fields = append(fields, schedule.FieldMinute)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScheduleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case schedule.FieldHour:
		return m.AddedHour()
	case schedule.FieldMinute:
		return m.AddedMinute()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScheduleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case schedule.FieldHour:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHour(v)
		return nil
	case schedule.FieldMinute:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinute(v)
		return nil
	}
	return fmt.Errorf("unknown Schedule numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScheduleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScheduleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScheduleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Schedule nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScheduleMutation) ResetField(name string) error {
	switch name {
	case schedule.FieldName:
		m.ResetName()
		return nil
	case schedule.FieldCreator:
		m.ResetCreator()
		return nil
	case schedule.FieldWeekDays:
		m.ResetWeekDays()
		return nil
	case schedule.FieldHour:
		m.ResetHour()
		return nil
	case schedule.FieldMinute:
		m.ResetMinute()
		return nil
	case schedule.FieldOperation:
		m.ResetOperation()
		return nil
	case schedule.FieldEnabled:
		m.ResetEnabled()
		return nil
	case schedule.FieldAllowEditByOthers:
		m.ResetAllowEditByOthers()
		return nil
	}
	return fmt.Errorf("unknown Schedule field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScheduleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScheduleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScheduleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScheduleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScheduleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScheduleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScheduleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Schedule unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScheduleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Schedule edge %s", name)
}
